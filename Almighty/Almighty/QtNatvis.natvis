<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <Type Name="QUrl">
    <DisplayString Condition="d">{*(Qt5Cored.dll!QUrlPrivate*)(d)}</DisplayString>
    <DisplayString>null</DisplayString>
    <Expand>
      <ExpandedItem Condition="d">(Qt5Cored.dll!QUrlPrivate*)(d)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QUrlPrivate">
    <DisplayString ModuleName="Qt5Cored.dll"
                   Condition="sectionIsPresent == 0 &amp;&amp; port == -1 &amp;&amp; !path.d-&gt;size">
      empty
    </DisplayString>
    <DisplayString ModuleName="Qt5Cored.dll" Condition="port &lt; 0 &amp;&amp; query.d-&gt;size">
      {scheme}://{host}{path}?{query}
    </DisplayString>
    <DisplayString ModuleName="Qt5Cored.dll" Condition="port &lt; 0 &amp;&amp; !query.d-&gt;size">
      {scheme}://{host}{path}
    </DisplayString>
    <DisplayString ModuleName="Qt5Cored.dll" Condition="port &gt;= 0 &amp;&amp; query.d-&gt;size">
      {scheme}://{host}:{port}{path}?{query}
    </DisplayString>
    <DisplayString ModuleName="Qt5Cored.dll" Condition="port &gt;= 0 &amp;&amp; !query.d-&gt;size">
      {scheme}://{host}:{port}{path}
    </DisplayString>
    <DisplayString ModuleName="Qt5Cored.dll">{scheme}://{host}{path}</DisplayString>
  </Type>

  <Type Name="QJsonObject">
    <Expand>
      <Item Name="object null" Condition="!this->o">nullptr</Item>
      <CustomListItems Condition="!!this->o">
        <Variable Name="n" InitialValue="uint(((Qt5Cored.dll!QJsonPrivate::Base*)o)->length.val >> 1)"/>
        <Item Name="objects [{n,d}]" Condition="n  &lt; 10000">(Qt5Cored.dll!QJsonPrivate::Object*)(this->o)</Item>
        <Item Name="object corrupted" Condition="!(n  &lt; 10000)">(void*)this->o</Item>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="QJsonArray">
    <Expand>
      <Item Name="array null" Condition="!this->a">nullptr</Item>
      <CustomListItems Condition="!!this->a">
        <!--<Item Name="data">(Qt5Cored.dll!QJsonPrivate::Data*)d</Item>-->
        <Variable Name="n" InitialValue="uint(((Qt5Cored.dll!QJsonPrivate::Base*)this->a)->length.val >> 1)"/>
        <Item Name="array [{n,d}]" Condition="n  &lt; 10000">(Qt5Cored.dll!QJsonPrivate::Array*)this->a</Item>
        <Item Name="array corrupted" Condition="!(n  &lt; 10000)">(void*)this->a</Item>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="QJsonValueRef">
    <DisplayString Condition="!is_object">array</DisplayString>
    <DisplayString Condition="is_object">object [{index,d}]</DisplayString>
    <Expand>
      <CustomListItems Condition="!is_object">
        <Item Name="array" >a->a</Item>
      </CustomListItems>
      <CustomListItems Condition="is_object">
        <!--reinterpret_cast<Entry *>(((char *)this) + table()[i]);-->
        <Variable Name="base" InitialValue="(char*)(o->o)"/>
        <Variable Name="of" InitialValue="((Qt5Cored.dll!QJsonPrivate::Base*)base)->tableOffset.val"/>
        <Variable Name="len" InitialValue="((Qt5Cored.dll!QJsonPrivate::Base*)base)->length.val >> 1"/>
        <Variable Name="tabl" InitialValue="(uint*)(base + of)"/>
        <Variable Name="pk" InitialValue="(void*)0"/>
        <If Condition="of &lt; 10000 &amp;&amp; tabl &amp;&amp; len &lt; 10000">
          <Exec>pk = reinterpret_cast&lt;void*&gt;(base + tabl[index])</Exec>
          <Item Name="object">((Qt5Cored.dll!QJsonPrivate::Entry *)pk)->value</Item>
        </If>
        <Else>
          <Item Name="object corrupted">0</Item>
        </Else>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="QJsonValue">
    <Expand>
      <Item Name="null" Condition="t == 0">nullptr</Item>
      <Item Name="boolean" Condition="t == 1">b</Item>
      <Item Name="float" Condition="t == 2">dbl</Item>
      <Item Name="string" Condition="t == 3">stringData</Item>
      <Item Name="array" Condition="t == 4">(Qt5Cored.dll!QJsonPrivate::Array *)(base)</Item>
      <Item Name="object" Condition="t == 5">(Qt5Cored.dll!QJsonPrivate::Object *)(base)</Item>
    </Expand>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::qle_bitfield&lt;*,*&gt;">
    <AlternativeType Name="QJsonPrivate::qle_bitfield&lt;*,*&gt;"/>
    <AlternativeType Name="Qt5Cored.dll!QJsonPrivate::qle_signedbitfield&lt;*,*&gt;"/>
    <AlternativeType Name="QJsonPrivate::qle_signedbitfield&lt;*,*&gt;"/>
    <DisplayString>{(val &gt;&gt; $T1) &amp; ((1 &lt;&lt; $T2) - 1)} </DisplayString>
    <Expand>
      <Item Name="value">(val &gt;&gt; $T1) &amp; ((1 &lt;&lt; $T2) - 1)</Item>
    </Expand>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::q_littleendian&lt;*&gt;">
    <AlternativeType Name="QJsonPrivate::q_littleendian&lt;*&gt;"/>
    <DisplayString>{val}</DisplayString>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::Object">
    <AlternativeType Name="QJsonPrivate::Object"/>
    <Expand>
      <CustomListItems>
        <Variable Name="i" InitialValue="0"/>
        <Variable Name="base" InitialValue="(Qt5Cored.dll!QJsonPrivate::Base*)this"/>
        <!--<Variable Name="isobj" InitialValue="!!(base->is_object.val &amp; 1)"/>-->
        <Variable Name="n" InitialValue="uint(base->length.val >> 1)"/>
        <Variable Name="of" InitialValue="(uint*)(Qt5Cored.dll!QJsonPrivate::offset *) (((char *) this) + base->tableOffset.val)"/>
        <Variable Name="entry" InitialValue="(char *)0"/>
        <Variable Name="stringdata" InitialValue="(char*)0"/>
        <Variable Name="key" InitialValue="(char*)0"/>
        <Loop Condition="n &lt; 10000">
          <If Condition="i &gt;= n">
            <Break/>
          </If>
          <Exec>entry=((char *)this + of[i])</Exec>
          <Exec>stringdata=(entry + sizeof(Qt5Cored.dll!QJsonPrivate::Entry))</Exec>
          <If Condition="(((Qt5Cored.dll!QJsonPrivate::Entry*)entry)->value.latinKey.val >> 4) &amp; 1">
            <Exec>key=((Qt5Cored.dll!Latin1String::Data*)stringdata)->latin1</Exec>
            <Item Name="[{key,[((Qt5Cored.dll!Latin1String::Data*)stringdata)->length.val] sb}]" Condition="key">((Qt5Cored.dll!QJsonPrivate::Entry*)entry)->value</Item>
          </If>
          <Else>
            <Exec>key=(char*)((Qt5Cored.dll!String::Data*)stringdata)->utf16</Exec>
            <Item Name="[{(ushort*)key,[((Qt5Cored.dll!String::Data*)stringdata)->length.val] sub}]" Condition="key">((Qt5Cored.dll!QJsonPrivate::Entry*)entry)->value</Item>
          </Else>
          <Exec>i++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::Array">
    <AlternativeType Name="QJsonPrivate::Array"/>
    <Expand>
      <CustomListItems>
        <Variable Name="i" InitialValue="0"/>
        <Variable Name="base" InitialValue="(char*)this"/>
        <Variable Name="n" InitialValue="((Qt5Cored.dll!QJsonPrivate::Base*)base)->length.val >> 1"/>
        <Variable Name="of" InitialValue="(Qt5Cored.dll!QJsonPrivate::offset *) (base + ((Qt5Cored.dll!QJsonPrivate::Base*)base)->tableOffset.val)"/>

        <Variable Name="jval" InitialValue="(void *)0"/>
        <Variable Name="typ" InitialValue="0"/>
        <Variable Name="lat" InitialValue="0"/>
        <Variable Name="val" InitialValue="0"/>
        <Variable Name="pk" InitialValue="(char *)0"/>

        <Loop>
          <If Condition="i &gt;= n">
            <Break/>
          </If>
          <Exec>jval = reinterpret_cast&lt;void*&gt;(of + i)</Exec>
          <Exec>typ = ((Qt5Cored.dll!QJsonPrivate::Value *)jval)->type.val &amp; 7</Exec>
          <Exec>lat = !!((((Qt5Cored.dll!QJsonPrivate::Value *)jval)->latinOrIntValue.val >> 3) &amp; 1)</Exec>
          <Exec>val = ((Qt5Cored.dll!QJsonPrivate::Value *)jval)->value.val >> 5</Exec>
          <Exec>pk = base + val</Exec>

          <Item Name="[{i,d}], null" Condition="typ == 0">nullptr</Item>
          <Item Name="[{i,d}], boolean" Condition="typ == 1">val != 0</Item>
          <Item Name="[{i,d}], float" Condition="typ == 2 &amp;&amp; lat">(double)(val)</Item>
          <Item Name="[{i,d}], float" Condition="typ == 2 &amp;&amp; !lat">*(double*)(pk) </Item>
          <Item Name="[{i,d}], string" Condition="typ == 3 &amp;&amp; lat">*(Qt5Cored.dll!QJsonPrivate::Latin1String::Data*)(pk)</Item>
          <Item Name="[{i,d}], string" Condition="typ == 3 &amp;&amp; !lat">*(Qt5Cored.dll!QJsonPrivate::String::Data*)(pk) </Item>
          <Item Name="[{i,d}], array" Condition="typ == 4">*(Qt5Cored.dll!QJsonPrivate::Array*)(pk)</Item>
          <Item Name="[{i,d}], object" Condition="typ == 5">*(Qt5Cored.dll!QJsonPrivate::Object*)(pk)</Item>

          <Exec>i++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::Latin1String::Data">
    <AlternativeType Name="QJsonPrivate::Latin1String::Data"/>
    <DisplayString>{latin1, [length.val] s8} </DisplayString>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::String::Data">
    <AlternativeType Name="QJsonPrivate::String::Data"/>
    <DisplayString>{utf16, [length.val] su}</DisplayString>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::Entry">
    <AlternativeType Name="QJsonPrivate::Entry"/>
    <Expand>
      <Item Name="Value">value</Item>
    </Expand>
  </Type>

  <Type Name="Qt5Cored.dll!QJsonPrivate::Value">
    <AlternativeType Name="QJsonPrivate::Value"/>
    <Expand>
      <CustomListItems>
        <Variable Name="typ" InitialValue="(type.val &amp; 7)"/>
        <Variable Name="lat" InitialValue="!!((latinOrIntValue.val >> 3) &amp; 1)"/>
        <Variable Name="pk" InitialValue="(char *)(1 + this)"/>
        <Variable Name="i" InitialValue="((latinKey.val >> 4) &amp; 1) == 0 ? sizeof(short) * ((String::Data*)pk)->length.val : ((Latin1String::Data*)pk)->length.val"/>

        <!--<Item Name="Key" Condition="((latinKey.val >> 4) &amp; 1) == 0">*(String::Data*)pk</Item>-->
        <!--<Item Name="Key" Condition="((latinKey.val >> 4) &amp; 1) == 1">*(Latin1String::Data*)pk</Item>-->

        <Exec>pk += (sizeof(ushort) + i + 3) &amp; ~3</Exec>

        <Item Name="null" Condition="typ == 0">nullptr</Item>
        <Item Name="boolean" Condition="typ == 1">int_value.val != 0</Item>
        <Item Name="float" Condition="typ == 2 &amp;&amp; lat">(double)(int_value.val >> 5)</Item>
        <Item Name="float" Condition="typ == 2 &amp;&amp; !lat">*(double*)(pk) </Item>
        <Item Name="string" Condition="typ == 3 &amp;&amp; lat">*(QJsonPrivate::Latin1String::Data*)(pk)</Item>
        <Item Name="string" Condition="typ == 3 &amp;&amp; !lat">*(QJsonPrivate::String::Data*)(pk) </Item>
        <Item Name="array" Condition="typ == 4">(Qt5Cored.dll!QJsonPrivate::Array*)(pk)</Item>
        <Item Name="object" Condition="typ == 5">(Qt5Cored.dll!QJsonPrivate::Object*)(pk)</Item>

        <!--<Item Name="type">typ</Item>-->

      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="QRegularExpression">
    <DisplayString>{*(Qt5Cored.dll!QRegularExpressionPrivate*)(d.d)}</DisplayString>
    <Expand>
      <ExpandedItem>*(Qt5Cored.dll!QRegularExpressionPrivate*)(d.d)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QRegularExpressionPrivate">
    <DisplayString ModuleName="Qt5Cored.dll">{pattern}</DisplayString>
  </Type>

  <Type Name="QRegularExpressionMatch">
    <DisplayString>{*(Qt5Cored.dll!QRegularExpressionMatchPrivate*)(d.d)}</DisplayString>
    <Expand>
      <ExpandedItem>*(Qt5Cored.dll!QRegularExpressionMatchPrivate*)(d.d)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QRegularExpressionMatchPrivate">
    <DisplayString ModuleName="Qt5Cored.dll">{matchType}</DisplayString>
    <Expand>
      <IndexListItems Condition="hasMatch">
        <Size>capturedCount</Size>
        <ValueNode>&amp;subject[capturedOffsets[$i*2]],[capturedOffsets[$i*2+1]-capturedOffsets[$i*2]]sub</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QArrayData">
    <DisplayString>ref {ref.atomic._q_value}, size {size} </DisplayString>
    <Expand>
      <CustomListItems>
        <Item Name="data[{size}]">reinterpret_cast&lt;char *&gt;(this) + offset, [size]</Item>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="std::map&lt;*&gt;" IncludeView="jsoncpp">
    <Expand>
      <TreeItems>
        <Size>_Mypair._Myval2._Myval2._Mysize</Size>
        <HeadPointer>_Mypair._Myval2._Myval2._Myhead-&gt;_Parent</HeadPointer>
        <LeftPointer>_Left</LeftPointer>
        <RightPointer>_Right</RightPointer>
        <ValueNode Condition="_Isnil == 0" Name="[{_Myval.second.type_,view(jsoncpp)}]">_Myval,view(jsoncpp)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  <Type Name="std::pair&lt;Json::Value::CZString const ,Json::Value&gt;">
    <DisplayString Condition="first.cstr_ != nullptr">{first.cstr_,s8}: {second}</DisplayString>
    <DisplayString>{second}</DisplayString>
    <Expand>
      <Item Name="key" Condition="!(second.type_ == 6 || second.type_ == 7) &amp;&amp; first.cstr_ != nullptr">first.cstr_,s8</Item>
      <Item Name="value" Condition="!(second.type_ == 6 || second.type_ == 7)">second</Item>
      <ExpandedItem Condition="second.type_ == 6 || second.type_ == 7">*(second.value_.map_),view(jsoncpp)</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="Json::Value::CZString">
    <DisplayString>{cstr_,s8}</DisplayString>
  </Type>

  <Type Name="Json::Value">
    <DisplayString Condition="type_ == 0">null</DisplayString>
    <DisplayString Condition="type_ == 1">{value_.int_}</DisplayString>
    <DisplayString Condition="type_ == 2">{value_.uint_}</DisplayString>
    <DisplayString Condition="type_ == 3">{value_.real_}</DisplayString>

    <DisplayString Condition="type_ == 4 &amp;&amp; allocated_ == 1">{value_.string_ + sizeof(unsigned),s8}</DisplayString>
    <DisplayString Condition="type_ == 4">{value_.string_,s8}</DisplayString>

    <DisplayString Condition="type_ == 5">{value_.bool_}</DisplayString>
    <DisplayString Condition="type_ == 6">array ({value_.map_-&gt;_Mypair._Myval2._Myval2._Mysize})</DisplayString>
    <DisplayString Condition="type_ == 7">object ({value_.map_-&gt;_Mypair._Myval2._Myval2._Mysize})</DisplayString>
    <DisplayString >Unknown Value type!</DisplayString>

    <StringView Condition="type_ == 4 &amp;&amp; allocated_ == 1">value_.string_ + sizeof(unsigned),s8</StringView>
    <StringView Condition="type_ == 4">value_.string_,s8</StringView>

    <Expand>
      <ExpandedItem Condition="type_ == 6 || type_ == 7">*(value_.map_),view(jsoncpp)</ExpandedItem>
    </Expand>
  </Type>


  <Type Name="web::http::uri">
    <DisplayString>({m_uri})</DisplayString>
  </Type>

  <Type Name="web::http::client::web_proxy">
    <DisplayString Condition="m_mode==0">{"default"}</DisplayString>
    <DisplayString Condition="m_mode==1">{"disabled"}</DisplayString>
    <DisplayString Condition="m_mode==2">{m_address}</DisplayString>
  </Type>

  <Type Name="web::http::http_request">
    <DisplayString>[{_m_impl._Ptr->m_method}]</DisplayString>
    <Expand>
      <Item Name="headers">((*((web::http::details::http_msg_base*)(&amp;(*((web::http::details::_http_request*)((_m_impl)._Ptr)))))).m_headers).m_headers</Item>
    </Expand>
  </Type>

  <Type Name="web::http::http_response">
    <DisplayString>[{_m_impl._Ptr->m_status_code}, {_m_impl._Ptr->m_reason_phrase}]</DisplayString>
    <Expand>
      <Item Name="status code">_m_impl._Ptr->m_status_code</Item>
      <Item Name="reason phrase">_m_impl._Ptr->m_reason_phrase</Item>
      <Item Name="headers">((*((web::http::details::http_msg_base*)(&amp;(*((web::http::details::_http_request*)((_m_impl)._Ptr)))))).m_headers).m_headers</Item>
    </Expand>
  </Type>

  <Type Name="web::json::value">
    <DisplayString Condition="(m_kind==0) &amp;&amp; ((*((web::json::details::_Number*)((m_value)._Myptr))).m_was_int)">
      Number {(*((web::json::details::_Number*)((m_value)._Myptr))).m_intval}
    </DisplayString>
    <DisplayString Condition="(m_kind==0) &amp;&amp; (!(*((web::json::details::_Number*)((m_value)._Myptr))).m_was_int)">
      Number {(*((web::json::details::_Number*)((m_value)._Myptr))).m_value}
    </DisplayString>
    <DisplayString Condition="m_kind==1">
      Boolean {(*((web::json::details::_Boolean*)(m_value._Myptr))).m_value}
    </DisplayString>
    <DisplayString Condition="(m_kind==2) &amp;&amp; (((&amp;((*((web::json::details::_String*)(m_value._Myptr))).m_string))))->_Myptr==0x00000000">
      String {((((&amp;((*((web::json::details::_String*)(m_value._Myptr))).m_wstring)))))->_Myptr}
    </DisplayString>
    <DisplayString Condition="(m_kind==2) &amp;&amp; (((&amp;((*((web::json::details::_String*)(m_value._Myptr))).m_wstring))))->_Myptr==0x00000000">
      String {((((&amp;((*((web::json::details::_String*)(m_value._Myptr))).m_string)))))->_Myptr}
    </DisplayString>
    <DisplayString Condition="m_kind==3">
      Object {(*((web::json::details::_Value*)(m_value._Myptr))).m_elements}
    </DisplayString>
    <DisplayString Condition="m_kind==4">
      Array {(*((web::json::details::_Value*)(m_value._Myptr))).m_elements}
    </DisplayString>
    <DisplayString Condition="m_kind==5">Null</DisplayString>
    <DisplayString Condition="m_kind==0xcccccccc">not initialized</DisplayString>

    <Expand>
      <ArrayItems Condition="m_kind==3">
        <Size>(*((web::json::details::_Value*)((m_value)._Myptr))).m_elements._Mylast - (*((web::json::details::_Value*)((m_value)._Myptr))).m_elements._Myfirst</Size>
        <ValuePointer>(*((web::json::details::_Value*)((m_value)._Myptr))).m_elements._Myfirst</ValuePointer>
      </ArrayItems>

      <ArrayItems Condition="m_kind==4">
        <Size>(*((web::json::details::_Value*)((m_value)._Myptr))).m_elements._Mylast - (*((web::json::details::_Value*)((m_value)._Myptr))).m_elements._Myfirst</Size>
        <ValuePointer>(*((web::json::details::_Value*)((m_value)._Myptr))).m_elements._Myfirst</ValuePointer>
      </ArrayItems>

    </Expand>
  </Type>

  <Type Name="QPoint">
    <AlternativeType Name="QPointF" />
    <DisplayString>{{ x = {xp}, y = {yp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
    </Expand>
  </Type>

  <Type Name="QRect">
    <DisplayString>{{ x = {x1}, y = {y1}, width = {x2 - x1 + 1}, height = {y2 - y1 + 1} }}</DisplayString>
    <Expand>
      <Item Name="[x]">x1</Item>
      <Item Name="[y]">y1</Item>
      <Item Name="[width]">x2 - x1 + 1</Item>
      <Item Name="[height]">y2 - y1 + 1</Item>
    </Expand>
  </Type>

  <Type Name="QRectF">
    <DisplayString>{{ x = {xp}, y = {yp}, width = {w}, height = {h} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
      <Item Name="[width]">w</Item>
      <Item Name="[height]">h</Item>
    </Expand>
  </Type>

  <Type Name="QSize">
    <AlternativeType Name="QSizeF" />
    <DisplayString>{{ width = {wd,g}, height = {ht,g} }}</DisplayString>
    <Expand>
      <Item Name="[width]">wd</Item>
      <Item Name="[height]">ht</Item>
    </Expand>
  </Type>

  <Type Name="QLine">
    <AlternativeType Name="QLineF" />
    <DisplayString>{{ start point = {pt1}, end point = {pt2} }}</DisplayString>
    <Expand>
      <Synthetic Name="[start point]">
        <DisplayString>{pt1}</DisplayString>
        <Expand>
          <ExpandedItem>pt1</ExpandedItem>
        </Expand>
      </Synthetic>
      <Synthetic Name="[end point]">
        <DisplayString>{pt2}</DisplayString>
        <Expand>
          <ExpandedItem>pt2</ExpandedItem>
        </Expand>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="QPolygon">
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>(QPoint*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QPolygonF">
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[closed]">
        d-&gt;size &gt; 0
        &amp;&amp; ((((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[0]).xp
        == (((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[d-&gt;size - 1]).xp)
        &amp;&amp; ((((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[0]).yp
        == (((QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)[d-&gt;size - 1]).yp)
      </Item>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>(QPointF*)((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name ="QVector2D">
    <DisplayString>{{ x = {xp}, y = {yp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
    </Expand>
  </Type>

  <Type Name ="QVector3D">
    <DisplayString>{{ x = {xp}, y = {yp}, z = {zp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
      <Item Name="[z]">zp</Item>
    </Expand>
  </Type>

  <Type Name ="QVector4D">
    <DisplayString>{{ x = {xp}, y = {yp}, z = {zp}, w = {wp} }}</DisplayString>
    <Expand>
      <Item Name="[x]">xp</Item>
      <Item Name="[y]">yp</Item>
      <Item Name="[z]">zp</Item>
      <Item Name="[w]">wp</Item>
    </Expand>
  </Type>

  <!--Alternative QVector for newer Qt -->
  <Type Name ="QVector2D">
    <Expand>
      <Item Name="x">v[0],g</Item>
      <Item Name="y">v[1],g</Item>
    </Expand>
  </Type>

  <Type Name ="QVector3D">
    <Expand>
      <Item Name="x">v[0],g</Item>
      <Item Name="y">v[1],g</Item>
      <Item Name="z">v[2],g</Item>
    </Expand>
  </Type>

  <Type Name ="QVector4D">
    <Expand>
      <Item Name="x">v[0],g</Item>
      <Item Name="y">v[1],g</Item>
      <Item Name="z">v[2],g</Item>
      <Item Name="w">v[3],g</Item>
    </Expand>
  </Type>

  <Type Name ="QMatrix">
    <!-- {{{{{_m11,g}, {_m12,g}}}, {{{_m21,g}, {_m22,g}}}, {{{_dx,g}, {_dy,g}}}}}-->
    <DisplayString>
      {{{{{_m11,g}, {_m12,g}, {_dx,g}}}, {{{_m21,g}, {_m22,g}, {_dy,g}}}}}
    </DisplayString>
    <Expand>
      <Item Name="[m11]">_m11</Item>
      <Item Name="[m12]">_m12</Item>
      <Item Name="[m21]">_m21</Item>
      <Item Name="[m22]">_m22</Item>
      <Item Name="[dx]">_dx</Item>
      <Item Name="[dy]">_dy</Item>
    </Expand>
  </Type>

  <Type Name ="QTransform">
    <DisplayString Condition="false">
      {{
      {{{affine._m11,g}, {affine._m12,g}, {m_13,g}}},
      {{{affine._m21,g}, {affine._m22,g}, {m_23,g}}},
      {{{affine._dx,g}, {affine._dy,g}, {m_33,g}}}
      }}
    </DisplayString>
    <DisplayString>
      {{ {{{affine._m11,g}, {affine._m21,g}, {affine._dx,g}}}, {{{affine._m12,g}, {affine._m22,g}, {affine._dy,g}}}, {{{m_13,g}, {m_23,g}, {m_33,g}}} }}
    </DisplayString>
  </Type>

  <Type Name ="QMatrix4x4">
    <DisplayString>
      {{ m11 = {m[0][0]}, m12 = {m[1][0]}, m13 = {m[2][0]}, m14 = {m[3][0]}, ... }}
    </DisplayString>
    <Expand>
      <Item Name="[m11]">m[0][0]</Item>
      <Item Name="[m12]">m[1][0]</Item>
      <Item Name="[m13]">m[2][0]</Item>
      <Item Name="[m14]">m[3][0]</Item>
      <Item Name="[m21]">m[0][1]</Item>
      <Item Name="[m22]">m[1][1]</Item>
      <Item Name="[m23]">m[2][1]</Item>
      <Item Name="[m24]">m[3][1]</Item>
      <Item Name="[m31]">m[0][2]</Item>
      <Item Name="[m32]">m[1][2]</Item>
      <Item Name="[m33]">m[2][2]</Item>
      <Item Name="[m34]">m[3][2]</Item>
      <Item Name="[m41]">m[0][3]</Item>
      <Item Name="[m42]">m[1][3]</Item>
      <Item Name="[m43]">m[2][3]</Item>
      <Item Name="[m44]">m[3][3]</Item>
    </Expand>
  </Type>

  <Type Name="QSizePolicy">
    <DisplayString>
      {{ horizontal = {static_cast&lt;Policy&gt;(bits.horPolicy)}, vertical = {static_cast&lt;Policy&gt;(bits.verPolicy)}, type = {ControlType(1 &lt;&lt; bits.ctype)} }}
    </DisplayString>
    <Expand>
      <Synthetic Name="[vertical policy]">
        <DisplayString>QSizePolicy::Policy::{static_cast&lt;Policy&gt;(bits.verPolicy)}</DisplayString>
      </Synthetic>
      <Synthetic Name="[horizontal policy]">
        <DisplayString>QSizePolicy::Policy::{static_cast&lt;Policy&gt;(bits.horPolicy)}</DisplayString>
      </Synthetic>
      <Synthetic Name="[control type]">
        <DisplayString>QSizePolicy::ControlType::{ControlType(1 &lt;&lt; bits.ctype)}</DisplayString>
      </Synthetic>
      <Synthetic Name="[expanding directions]">
        <DisplayString
            Condition="(static_cast&lt;Policy&gt;(bits.verPolicy) &amp; ExpandFlag)">
          Qt::Vertical (2)
        </DisplayString>
        <DisplayString
            Condition="(static_cast&lt;Policy&gt;(bits.horPolicy) &amp; ExpandFlag)">
          Qt::Horizontal (1)
        </DisplayString>
      </Synthetic>
      <Item Name="[vertical stretch]">static_cast&lt;int&gt;(bits.verStretch)</Item>
      <Item Name="[horizontal stretch]">static_cast&lt;int&gt;(bits.horStretch)</Item>
      <Item Name="[has height for width]">bits.hfw == 1</Item>
      <Item Name="[has width for height]">bits.wfh == 1</Item>
    </Expand>
  </Type>

  <Type Name="QChar">
    <DisplayString>{ucs,c}</DisplayString>
    <StringView>ucs,c</StringView>
    <Expand>
      <Item Name="[latin 1]">ucs > 0xff ? '\0' : char(ucs),c</Item>
      <Item Name="[unicode]">ucs,c</Item>
    </Expand>
  </Type>

  <Type Name="QString">
    <DisplayString Optional="true">{((unsigned short*)d) + d-&gt;offset / 2,[d-&gt;size]sub}</DisplayString>
    <StringView>((unsigned short*)d) + d-&gt;offset / 2,[d-&gt;size]sub</StringView>
    <Expand>
      <Item Name="[value]">((unsigned short*)d) + d->offset / 2,[d-&gt;size]sub</Item>
      <Item Name="[referenced]" Optional="true">d-&gt;ref.atomic._q_value</Item>
      <Item Name="[size]" ExcludeView="DisplayString">d-&gt;size</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>((unsigned short*)d) + d->offset / 2,c</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QStringRef">
    <DisplayString ModuleName="QtCored.dll">{&amp;(*m_string)[m_position],[m_size]sub}</DisplayString>
    <StringView>&amp;(*m_string)[m_position],[m_size]sub</StringView>
  </Type>

  <Type Name="QByteArray">
    <DisplayString>{((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset),sb}</DisplayString>
    <StringView>((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset),sb</StringView>
    <Expand>
      <Item Name="[size]">d-&gt;size</Item>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems>
        <Size>d-&gt;size</Size>
        <ValuePointer>((reinterpret_cast&lt;char*&gt;(d)) + d-&gt;offset),c</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QBitArray">
    <DisplayString>{{ size = {(d.d-&gt;size &lt;&lt; 3) - *((reinterpret_cast&lt;char*&gt;(d.d)) + d.d-&gt;offset)} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d.d-&gt;ref.atomic._q_value</Item>
      <IndexListItems>
        <Size>(d.d-&gt;size &lt;&lt; 3) - *((reinterpret_cast&lt;char*&gt;(d.d)) + d.d-&gt;offset)</Size>
        <ValueNode>
          (*(reinterpret_cast&lt;const unsigned char*&gt;((reinterpret_cast&lt;char*&gt;(d.d)) + d.d-&gt;offset) + 1
          + ($i &gt;&gt; 3)) &amp; (1 &lt;&lt; ($i &amp; 7))) != 0
        </ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QVarLengthArray&lt;*&gt;">
    <AlternativeType Name="QVarLengthArray&lt;*, int&gt;" />
    <DisplayString>{{ size = {s} }}</DisplayString>
    <Expand>
      <Item Name="[capacity]">a</Item>
      <ArrayItems>
        <Size>s</Size>
        <ValuePointer>ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QDate">
    <DisplayString>{{ julian day = {jd} }}</DisplayString>
    <Expand></Expand>
  </Type>

  <Type Name="QTime">
    <DisplayString
        Condition="mds == 1">{{ millisecond = {mds} }}</DisplayString>
    <DisplayString
        Condition="mds != 1">{{ milliseconds = {mds} }}</DisplayString>
    <Expand>
      <Item Name="[hour]"
            Condition="(mds / 3600000) == 1">mds / 3600000, d</Item>
      <Item Name="[hours]"
            Condition="(mds / 3600000) != 1">mds / 3600000, d</Item>
      <Item Name="[minute]"
            Condition="((mds % 3600000) / 60000) == 1">(mds % 3600000) / 60000, d</Item>
      <Item Name="[minutes]"
            Condition="((mds % 3600000) / 60000) != 1">(mds % 3600000) / 60000, d</Item>
      <Item Name="[second]"
            Condition="((mds / 1000) % 60) == 1">(mds / 1000) % 60, d</Item>
      <Item Name="[seconds]"
            Condition="((mds / 1000) % 60) != 1">(mds / 1000) % 60, d</Item>
      <Item Name="[millisecond]"
            Condition="(mds % 1000) == 1">mds % 1000, d</Item>
      <Item Name="[milliseconds]"
            Condition="(mds % 1000) != 1">mds % 1000, d</Item>
    </Expand>
  </Type>

  <Type Name="QRegularExpression">
    <DisplayString>{d.pattern}</DisplayString>
  </Type>

  <Type Name="QSharedData">
    <Expand>
      <Item Name="[referenced]">ref._q_value</Item>
    </Expand>
  </Type>

  <Type Name="QSharedPointer&lt;*&gt;">
    <DisplayString Condition="!value">null</DisplayString>
    <DisplayString>{{s|w={d-&gt;strongref._q_value}|{d-&gt;weakref._q_value}}}, {*value}</DisplayString>
    <Expand>
      <ExpandedItem Condition="value">*value</ExpandedItem>
    </Expand>
  </Type>

  <!--<Type Name="QSharedDataPointer&lt;*&gt;">
        <DisplayString>pointer to implicit shared object of type {"$T1"}</DisplayString>
        <Expand>
            <ExpandedItem>($T1*)d</ExpandedItem>
        </Expand>
    </Type>-->

  <Type Name="QExplicitlySharedDataPointer&lt;*&gt;">
    <DisplayString>pointer to explicit shared object of type {"$T1"}</DisplayString>
    <Expand>
      <ExpandedItem>d</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QPointer&lt;*&gt;">
    <DisplayString>guarded pointer to subclass of QObject of type {"$T1"}</DisplayString>
    <Expand>
      <Item Name="[is null]">wp.d == 0 || wp.d-&gt;strongref._q_value == 0 || wp.value == 0</Item>
    </Expand>
  </Type>

  <Type Name="QWeakPointer&lt;*&gt;">
    <!--weak reference to shared pointer of type {"$T1"}-->
    <DisplayString Condition="!value">null</DisplayString>
    <DisplayString>{{s|w={d-&gt;strongref._q_value}|{d-&gt;weakref._q_value} {(void*)value}}}</DisplayString>
    <Expand>
      <ExpandedItem Condition="value">value</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QScopedPointer&lt;*&gt;">
    <AlternativeType Name="QScopedArrayPointer&lt;*&gt;" />
    <DisplayString Condition="!d">null</DisplayString>
    <DisplayString>{*d}</DisplayString>
    <Expand>
      <ExpandedItem Condition="d">*d</ExpandedItem>
    </Expand>
  </Type>

  <!--<Type Name="QScopedArrayPointer&lt;*&gt;">
        <DisplayString>scoped pointer to dynamically allocated array of objects of type {"$T1"}</DisplayString>
        <Expand>
            <Item Name="[is null]">!d</Item>
        </Expand>
    </Type>-->

  <Type Name="QPair&lt;*,*&gt;">
    <DisplayString>({first}, {second})</DisplayString>
    <Expand>
      <Item Name="[first]">first</Item>
      <Item Name="[second]">second</Item>
    </Expand>
  </Type>

  <Type Name="QVector&lt;*&gt;">
    <AlternativeType Name="QStack&lt;*&gt;"></AlternativeType>
    <DisplayString Condition="d">{{ size = {d-&gt;size} }}</DisplayString>
    <DisplayString>empty</DisplayString>
    <Expand>
      <Item Name="[referenced]" Condition="d">d-&gt;ref.atomic._q_value</Item>
      <ArrayItems Condition="d">
        <Size>d-&gt;size</Size>
        <ValuePointer>($T1*)((char*)d + d-&gt;offset)</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;::Node" Priority="Medium">
    <Expand>
      <ExpandedItem Optional="true">
        *($T1*)v
      </ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;::Node">
    <Intrinsic Name="sz" Expression="QTypeInfo&lt;$T1&gt;::isLarge || QTypeInfo&lt;$T1&gt;::isStatic" />
    <Expand>
      <ExpandedItem Optional="true" Condition="sz()">
        *($T1*)v
      </ExpandedItem>
      <ExpandedItem Optional="true" Condition="!sz()">
        *($T1*)this
      </ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;" Priority="Medium">
    <AlternativeType Name="QQueue&lt;*&gt;" Priority="Medium"></AlternativeType>
    <Intrinsic Name="sz" Expression="sizeof($T1)&gt;16" />
    <Intrinsic Name="length" Expression="d-&gt;end - d-&gt;begin" />
    <Intrinsic Name="pointer" Expression="((QList&lt;$T1&gt;::Node*)(d->array + d->begin + i))">
      <Parameter Name="i" Type="int" />
    </Intrinsic>
    <DisplayString Condition="d==nullptr || !length()">empty</DisplayString>
    <DisplayString>{{ size = {d-&gt;end - d-&gt;begin} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <IndexListItems Optional="true">
        <Size>length()</Size>
        <ValueNode Condition="sz()">*($T1*)(pointer($i)-&gt;v)</ValueNode>
        <ValueNode Condition="!sz()">*($T1*)pointer($i)</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QList&lt;*&gt;">
    <AlternativeType Name="QQueue&lt;*&gt;" />
    <Intrinsic Name="sz" Expression="(int)QTypeInfo&lt;$T1&gt;::isLarge || (int)QTypeInfo&lt;$T1&gt;::isStatic" />
    <Intrinsic Name="length" Expression="d-&gt;end - d-&gt;begin" />
    <Intrinsic Name="pointer" Expression="((QList&lt;$T1&gt;::Node*)(d->array + d->begin + i))">
      <Parameter Name="i" Type="int" />
    </Intrinsic>
    <DisplayString Condition="d==nullptr || !length()">empty</DisplayString>
    <DisplayString>{{ size = {length()} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <IndexListItems Optional="true">
        <Size>length()</Size>
        <ValueNode Condition="sz()">*($T1*)(pointer($i)-&gt;v)</ValueNode>
        <ValueNode Condition="!sz()">*($T1*)pointer($i)</ValueNode>
      </IndexListItems>
    </Expand>
  </Type>

  <Type Name="QStringList">
    <DisplayString>{{ size = {d-&gt;end - d-&gt;begin} }}</DisplayString>
    <Expand>
      <ExpandedItem>
        *((QList&lt;QString&gt;*)this)
      </ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QLinkedList&lt;*&gt;">
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <LinkedListItems>
        <Size>d-&gt;size</Size>
        <HeadPointer>d-&gt;n</HeadPointer>
        <NextPointer>n</NextPointer>
        <ValueNode>(*(QLinkedListNode&lt;$T1&gt;*)this).t</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="QMapNode&lt;*,*&gt;">
    <DisplayString>({key}, {value})</DisplayString>
    <Expand>
      <Item Name="[key]">key</Item>
      <Item Name="[value]">value</Item>
    </Expand>
  </Type>

  <Type Name="QMap&lt;*,*&gt;">
    <AlternativeType Name="QMultiMap&lt;*,*&gt;" />
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <TreeItems>
        <Size>d-&gt;size</Size>
        <HeadPointer>d-&gt;header.left</HeadPointer>
        <LeftPointer>left</LeftPointer>
        <RightPointer>right</RightPointer>
        <ValueNode>*((QMapNode&lt;$T1,$T2&gt;*)this)</ValueNode>
      </TreeItems>
    </Expand>
  </Type>

  <Type Name="QHashNode&lt;*,*&gt;">
    <DisplayString Condition="next == 0">(empty)</DisplayString>
    <DisplayString Condition="next != 0">({key}, {value})</DisplayString>
    <Expand>
      <Item Name="[key]" Condition="next != 0">key</Item>
      <Item Name="[value]" Condition="next != 0">value</Item>
    </Expand>
  </Type>

  <Type Name="QHash&lt;*,*&gt;">
    <AlternativeType Name="QMultiHash&lt;*,*&gt;" />
    <DisplayString>{{ size = {d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[referenced]">d-&gt;ref.atomic._q_value</Item>
      <CustomListItems Condition="d-&gt;numBuckets">
        <Variable Name="i" InitialValue="0" />
        <Variable Name="n" InitialValue="0" />
        <Variable Name="j" InitialValue="0" />
        <Variable Name="node" InitialValue="(QHashNode&lt;$T1,$T2&gt;*)0" />
        <Exec>i=0</Exec>
        <Loop Condition="i &lt; d-&gt;numBuckets">
          <Exec>node = (QHashNode&lt;$T1,$T2&gt;*)(d-&gt;buckets[i])</Exec>
          <Loop Condition="node-&gt;next != 0">
            <Item Name="[{j}]">*node</Item>
            <Exec>j++</Exec>
            <Exec>node = node-&gt;next</Exec>
          </Loop>
          <Exec>i++</Exec>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

  <Type Name="QHashNode&lt;*,QHashDummyValue&gt;">
    <DisplayString Condition="next == 0">(empty)</DisplayString>
    <DisplayString Condition="next != 0">{key}</DisplayString>
    <Expand>
      <Item Name="[key]" Condition="next != 0">key</Item>
    </Expand>
  </Type>

  <Type Name="QSet&lt;*&gt;">
    <DisplayString>{{ size = {q_hash.d-&gt;size} }}</DisplayString>
    <Expand>
      <ExpandedItem>q_hash</ExpandedItem>
    </Expand>
  </Type>

  <Type Name="QCache&lt;*,*&gt;::Node">
    <DisplayString>({*keyPtr}, {*t})</DisplayString>
    <Expand>
      <Item Name="[key]">*keyPtr</Item>
      <Item Name="[value]">*t</Item>
    </Expand>
  </Type>

  <Type Name="QCache&lt;*,*&gt;">
    <DisplayString>{{ size = {hash.d-&gt;size} }}</DisplayString>
    <Expand>
      <Item Name="[max coast]">mx</Item>
      <Item Name="[total coast]">total</Item>
      <Item Name="[referenced]">hash.d-&gt;ref.atomic._q_value</Item>
      <LinkedListItems>
        <Size>hash.d-&gt;size</Size>
        <HeadPointer>f</HeadPointer>
        <NextPointer>n</NextPointer>
        <ValueNode>*((Node*)this)</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>

  <Type Name="QVariant">
    <Intrinsic Name="pointer" Expression="d.is_shared
               ? d.data.shared-&gt;ptr
               : reinterpret_cast&lt;const void *&gt;(&amp;d.data.ptr)" Optional="true"></Intrinsic>
    <!--Region DisplayString QVariant-->

    <DisplayString Condition="d.type == QMetaType::UnknownType">Invalid</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Bool">{d.data.b}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Int">{d.data.i}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::UInt">{d.data.u}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::LongLong">{d.data.ll}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::ULongLong">{d.data.ull}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Double">double {{{d.data.d,g}}}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::Float">float {{{d.data.f,g}}}</DisplayString>
    <DisplayString Condition="d.type == QMetaType::QChar">{d.data.c}</DisplayString>

    <DisplayString Optional="true" Condition="d.type == QMetaType::QVariantMap">{*((QMap&lt;QString,QVariant&gt;*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVariantList">{*((QList&lt;QVariant&gt;*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QString">{*((QString*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QStringList">{*((QStringList*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QByteArray">{*((QByteArray*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QBitArray">{*((QBitArray*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QDate">{*((QDate*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTime">{*((QTime*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QDateTime">DateTime {*((QDateTime*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QUrl">Url {*((QUrl*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QLocale">Locale {*((QLocale*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRect">{*((QRect*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRectF">{*((QRectF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QSize">{*((QSize*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QSizeF">{*((QSizeF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QLine">{*((QLine*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QLineF">{*((QLineF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPoint">{*((QPoint*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPointF">{*((QPointF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRegExp">RegExp {*((QRegExp*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRegularExpression">RegularExpression {*((QRegularExpression*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVariantHash">{*((QHash&lt;QString,QVariant&gt;*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QEasingCurve">EasingCurve {*((QEasingCurve*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QUuid">Uuid {*((QUuid*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QModelIndex">ModelIndex {*((QModelIndex*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::LastCoreType">LastCoreType</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QFont">Font {*((QFont*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPixmap">Pixmap {*((QPixmap*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QBrush">Brush {*((QBrush*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QColor">Color {*((QColor*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPalette">Palette {*((QPalette*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QImage">Image {*((QImage*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPolygon">Polygon {*((QPolygon*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QRegion">Region {*((QRegion*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QBitmap">Bitmap {*((QBitmap*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QCursor">Cursor {*((QCursor*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QKeySequence">KeySequence {*((QKeySequence*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPen">Pen {*((QPen*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTextLength">TextLength {*((QTextLength*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTextFormat">TextFormat {*((QTextFormat*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QMatrix">Matrix {*((QMatrix*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QTransform">Transform {*((QTransform*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QMatrix4x4">Matrix4x4 {*(QMatrix4x4*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVector2D">Vector2D {*(QVector2D*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVector3D">Vector3D {*(QVector3D*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QVector4D">Vector4D {*(QVector4D*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QQuaternion">Quaternion {*(QQuaternion*)pointer()}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QPolygonF">PolygonF {*((QPolygonF*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QIcon">Icon {*((QIcon*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::LastGuiType">LastGuiType</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::QSizePolicy">SizePolicy {*((QSizePolicy*)pointer())}</DisplayString>
    <DisplayString Optional="true" Condition="d.type == QMetaType::User">UserType</DisplayString>
    <DisplayString Optional="true" Condition="d.type == 0xffffffff">LastType</DisplayString>

    <!--End region DisplayString QVariant-->

    <!--Region DisplayView QVariant-->

    <StringView Condition="d.type == QMetaType::QChar">d.data.c</StringView>
    <StringView Condition="d.type == QMetaType::QString">*((QString*)pointer())</StringView>
    <StringView Condition="d.type == QMetaType::QByteArray">*((QByteArray*)pointer())</StringView>

    <!--End region DisplayView QVariant-->

    <!--Region Expand QVariant-->

    <Expand>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QVariantMap"> *((QMap&lt;QString,QVariant&gt;*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QVariantList">*((QList&lt;QVariant&gt;*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QString">     *((QString*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QStringList"> *((QStringList*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QByteArray">  *((QByteArray*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QBitArray">   *((QBitArray*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QDate">       *((QDate*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QTime">       *((QTime*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QRect">       *((QRect*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QRectF">      *((QRectF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QSize">       *((QSize*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QSizeF">      *((QSizeF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QLine">       *((QLine*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QLineF">      *((QLineF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QPoint">      *((QPoint*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QPointF">     *((QPointF*)pointer())</ExpandedItem>
      <ExpandedItem Optional="true" Condition="d.type == QMetaType::QVariantHash">*((QHash&lt;QString,QVariant&gt;*)pointer())</ExpandedItem>
    </Expand>

    <!--End region Expand QVariant-->
  </Type>
</AutoVisualizer>